pipeline {
    agent any

    environment {
        PYTHON_PATH = "C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\python.exe"
        PYTHON_PATH_SCRIPTS = "C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\Scripts"

    }

    stages {
        stage('Get Code') {
            steps {
                git 'https://github.com/GiovannaLeon/helloworld.git'
                bat "dir"
                echo WORKSPACE
            }
        }

        // Etapa de Pruebas Unitarias
        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        SET PYTHONPATH=%WORKSPACE%
                        %PYTHON_PATH_SCRIPTS%\\coverage.exe run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest  --junitxml=result-unit.xml test\\unit
                 
                        
                    
                    '''
                    sleep(5) // Asegúrate de que los resultados estén listos
                    junit 'result-unit.xml' // Reporte de las pruebas unitarias
                }
            }
        }

        // Etapa de Cobertura de Pruebas (Reutilizando los resultados de Unit)
        stage('Coverage') {
            steps {
                bat '''
                   %PYTHON_PATH_SCRIPTS%\\coverage.exe xml
                '''
                
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    cobertura coberturaReportFile: '**/coverage.xml', conditionalCoverageTargets: '100,0,80', lineCoverageTargets: '100,0,90'
                }
            }
        }


        // Etapa de Análisis Estático (Flake8)
        stage('Static') {
            steps {
                bat '''
                    %PYTHON_PATH_SCRIPTS%\\flake8.exe --exit-zero --format=pylint --exit-zero app >flake8.out
                '''
                // Umbrales para Flake8
                recordIssues tools: [flake8(name: 'Flake8', pattern: '**/flake8.out')],
                              qualityGates: [
                                  [threshold: 8, type: 'TOTAL', unstable: true],  // 8 o más hallazgos -> Unstable
                                  [threshold: 10, type: 'TOTAL', unstable: false, healthy: false]  // 10 o más hallazgos -> Unhealthy
                              ]
            }
        }

        // Etapa de Análisis de Seguridad (Bandit)
        stage('Security') {
            steps {
                bat '''
                    %PYTHON_PATH_SCRIPTS%\\bandit.exe --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    // Usamos el patrón relativo para buscar 'bandit.out' y aplicar los Quality Gates
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: '**/bandit.out')],
                                 qualityGates: [
                                     [threshold: 2, type: 'TOTAL', unstable: true],   // 2 o más hallazgos -> Unstable
                                     [threshold: 4, type: 'TOTAL', unstable: false, healthy: false]  // 4 o más hallazgos -> Unhealthy
                                 ]
                }
            }
        }

       // Etapa de Pruebas de Rendimiento (JMeter)
        stage('Performance') {
            steps {
                 bat '''
                    SET FLASK_APP=app\\api.py
                    start /B %PYTHON_PATH% -m flask run --host=0.0.0.0 --port=5000
                    timeout /t 10 /nobreak
                    rem Espera 10 segundos para asegurarse de que Flask esté listo antes de correr las pruebas
                    C:\\Users\\amaro\\Downloads\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                '''
                
                script {
                    
                    // Leemos el archivo coverage.xml generado
                   // def coverageFile = readFile('../coverage.xml')
                 
                 try {
                        def coverageFile = readFile('coverage.xml')
                        echo "Archivo coverage.xml leído correctamente."
                
                    // Expresión regular para extraer la cobertura de líneas
                    def lineCoverageMatch = (coverageFile =~ /<counter type="line" covered="(\d+)"/)
                    def lineCoverage = lineCoverageMatch ? lineCoverageMatch[0][1].toInteger() : 0
                    echo "Expresión 1."
                
                    // Expresión regular para extraer la cobertura de ramas
                    def branchCoverageMatch = (coverageFile =~ /<counter type="branch" covered="(\d+)" /)
                    def branchCoverage = branchCoverageMatch ? branchCoverageMatch[0][1].toInteger() : 0
                    echo "Expresión 2."
            
                echo "Valor de lineCoverageMatch: ${lineCoverageMatch}"
                
                echo "Valor de lineCoverage: ${lineCoverage}"
            
                
                echo "Valor de branchCoverageMatch: ${branchCoverageMatch}"
                
                echo "Valor de branchCoverage: ${branchCoverage}"
                
                    // Verificar cobertura por líneas
                    //if (lineCoverage < 85) {
                     //   currentBuild.result = 'FAILURE'
                    //} else if (lineCoverage < 95) {
                     //   currentBuild.result = 'UNSTABLE'
                    //} else {
                    //    currentBuild.result = 'SUCCESS'
                    //}
                    //echo "Expresión 3."
                
                    // Verificar cobertura por ramas/condiciones
                    //if (branchCoverage < 80) {
                      //  currentBuild.result = 'FAILURE'
                    //} else if (branchCoverage < 90) {
                      //  currentBuild.result = 'UNSTABLE'
                    //} else {
                      //  currentBuild.result = 'SUCCESS'
                    //}
                    //echo "Expresión 4."
                


                    } catch (Exception e) {
                        echo "Error al leer coverage.xml: ${e.message}"
                    }

                 
              

                    // Después de la ejecución de las pruebas de rendimiento y la cobertura, procesamos el reporte
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        // Ejecutar el reporte de rendimiento
                        perfReport sourceDataFiles: '**/flask.jtl'
                    }
                }
            }
        }
    }
}